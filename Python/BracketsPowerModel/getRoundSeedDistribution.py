#!/usr/bin/env python
import json
import os.path
import sys
from pprint import pprint
from scoringUtils import applyRoundResults

# Author: 	Ian Ludden
# Date: 	22 June 2018
# Modified: 22 June 2018


# Returns the seeds that reach the given round number. 
# If roundNum == 7, returns the champion seed. 
def getRoundSeeds(bracketVector, roundNum):
	roundSeeds = []
	regionWinners = []

	# Compute Rounds 1-4 scores
	for region in range(4):
		start = 15 * region
		end = start + 8
		regionVector = bracketVector[start:end]

		seeds = [1, 16, 8, 9, 5, 12, 4, 13, 6, 11, 3, 14, 7, 10, 2, 15]

		stopRound = min(roundNum, 5)

		for r in range(1, stopRound):
			seeds = applyRoundResults(seeds, regionVector)

			start = end
			end += int(len(seeds) / 2)
			regionVector = bracketVector[start:end]

		regionWinners.append(seeds[0])

		if stopRound < 5:
			for seed in seeds:
				roundSeeds.append(seed)
			
	if stopRound < 5:
		return roundSeeds

	if roundNum == 5:
		return regionWinners

	# Compute Rounds 5-6
	finalFourVector = bracketVector[-3:]

	finalSeeds = []

	if finalFourVector[0] == 1:
		finalSeeds.append(regionWinners[0])
	else:
		finalSeeds.append(regionWinners[1])

	if finalFourVector[1] == 1:
		finalSeeds.append(regionWinners[2])
	else:
		finalSeeds.append(regionWinners[3])

	if roundNum == 6:
		return finalSeeds

	championSeeds = []
	if finalFourVector[2] == 1:
		championSeeds.append(finalSeeds[0])
	else:
		championSeeds.append(finalSeeds[1])

	return championSeeds


## Test with PF:
# pickFavoriteString = '111111111000101111111111000101111111111000101111111111000101111'
# pickFavoriteVector = [int(pickFavoriteString[i]) for i in range(63)]

# for roundNum in range(1, 8):
# 	seeds = getRoundSeeds(pickFavoriteVector, roundNum)
# 	print 'Round {0}:'.format(roundNum)
# 	print seeds


######################################################################
# This script computes the distribution of seeds which 
# reached the given round number (1 to 6) in the brackets 
# generated by each model for each year.
######################################################################




numTrials = 50000
numBatches = 10

roundNum = int(sys.argv[1])
modelFilename = sys.argv[2]

with open(modelFilename, 'r') as modelFile:
	modelsDataJson = modelFile.read().replace('\n', '')

modelsDict = json.loads(modelsDataJson)
modelsList = modelsDict['models']

# folderName = 'Experiments/50kTrials/'
home = os.path.expanduser("~")
folderName = "{0}/Experiments/50kTrials_20to33".format(home)

for year in range(2013, 2019):
	print('{0},,'.format(year))

	for model in modelsList:
		modelName = model['modelName']
		print('{0},,'.format(modelName))

		seedTally = [0 for i in range(17)] # index 0 unused

		for batchNumber in range(numBatches):
			batchFolderName = '{0}/Batch{1:02d}'.format(folderName, batchNumber)
			inputFilename = '{2}/generatedBrackets_{0}_{1}.json'.format(modelName, year, batchFolderName)

			with open(inputFilename, 'r') as inputFile:
				dataJson = inputFile.read().replace('\n', '')

			dataPyDict = json.loads(dataJson)
			bracketList = dataPyDict['brackets']

			brackets = []
			for bracketDict in bracketList:
				bracketString = bracketDict['bracketVector']
				bracketVector = [int(bracketString[i]) for i in range(len(bracketString))]
				roundSeeds = getRoundSeeds(bracketVector, roundNum)
				
				for seed in roundSeeds:
					seedTally[seed] += 1

		totalTally = sum(seedTally)
		seedProp = [(seedTally[i] * 1.0 / totalTally) for i in range(17)]

		print("Seed,Proportion")
		for seedNum in range(1, 17):
			print("{0},{1}".format(seedNum,seedProp[seedNum]))

		print('')

