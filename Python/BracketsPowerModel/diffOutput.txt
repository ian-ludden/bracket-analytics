8d7
< 
10,13d8
< from samplingUtils import getE8SeedBottom, getE8SeedTop
< from samplingUtils import getF4SeedSplit, getF4SeedTogether
< from samplingUtils import getChampion, getRunnerUp
< 
18d12
< ######################################################################
23c17
< #     15 Apr 2018
---
> #     16 Feb 2018
28,57c22,23
< # This general version handles all parameters previously implemented 
< # separately in runExperimentsFixedAlpha.py, 
< # runExperimentsSampleF4.py, and runExperimentsSampleE8.py. 
< # 
< # Specifically, this version supports:
< # - "Forward" Power Model
< # - "Reverse" Power Model (generate champ and runner-up, then forward)
< # - "Reverse" Power Model with F4 (also generate other two F4 seeds)
< # - F4 Model 1, where F4 seeds are generated using "Model 1," 
< #   then power model is applied to games before and after
< # - F4 Model 2, where F4 seeds are generated using "Model 2," 
< #   then power model is applied to games before and after
< # - E8 Model, where E8 seeds are generated,  
< #   then power model is applied to games before and after
< # 
< # Also, the Round 1 alpha values are optionally grouped as:
< # (1, 16) alone
< # (2, 15) alone
< # (3, 14), (4, 13) 
< # (5, 12), (6, 11), (7, 10)
< # (8, 9) alone and fixed at 0.5 probability (alpha = 0)
< # 
< # All weighted alpha values are computed using the standard 
< # weighting (multiply each alpha by [# matchups]).
< #
< # This version no longer requires models to specify the alpha value
< # parameters for each round. Round 1 is always matchup-specific 
< # (with optional grouping), and Rounds 2-6 always use a 
< # weighted average. 
< ######################################################################
---
> # In this version, the alpha values are determined by the given
> # JSON description of the model. 
61c27
< 	alpha = getAlpha(s1, s2, model, year, roundNum)	
---
> 	alpha = getAlpha(s1, s2, model, year, roundNum)
66d31
< 
71a37
> 	regionWinners = []
75,81c41
< 	e8Seeds = [-1, -1, -1, -1, -1, -1, -1, -1]
< 	f4Seeds = [-1, -1, -1, -1]
< 	ncgSeeds = [-1, -1]
< 
< 	genE8Seeds = [] # The E8 seeds generated by the first three rounds
< 
< 	# Loop through regional rounds R64, R32, and S16
---
> 	# Loop through all regional rounds
82a43
> 		# print '=== Region {0} ==='.format(region)
84c45
< 		for roundNum in range(1, 4): # Don't do Elite Eight games yet
---
> 		for roundNum in range(1, 5):
99,115c60
< 		for seed in seeds:
< 			genE8Seeds.append(seed)
< 
< 	e8Seeds = genE8Seeds
< 
< 	# Round 4:
< 	for gameNum in range(4):
< 		s1 = e8Seeds[2 * gameNum]
< 		s2 = e8Seeds[2 * gameNum + 1]
< 		p = getP(s1, s2, model, year, 4)
< 
< 		if random.random() <= p:
< 			bracket.append(1)
< 			f4Seeds[gameNum] = s1
< 		else:
< 			bracket.append(0)
< 			f4Seeds[gameNum] = s2
---
> 		regionWinners.append(seeds[0])
117a63
> 	semiFinalists = []
119,131c65,67
< 		s1 = f4Seeds[2 * gameNum]
< 		s2 = f4Seeds[2 * gameNum + 1]
< 
< 		if 'Rev' in endModel:
< 			print 'SPECIAL CASE: '.format('Reverse model, champion and runner-up fixed.')
< 			if (2 * gameNum == champRegion) or (2 * gameNum == ruRegion):
< 				p = 1
< 			elif (2 * gameNum + 1 == champRegion) or (2 * gameNum + 1 == ruRegion):
< 				p = 0
< 			else:
< 				p = getP(s1, s2, model, year, 5)
< 		else:
< 			p = getP(s1, s2, model, year, 5)
---
> 		s1 = regionWinners[2 * gameNum]
> 		s2 = regionWinners[2 * gameNum + 1]
> 		p = getP(s1, s2, model, year, 5)
135c71
< 			ncgSeeds[gameNum] = s1
---
> 			semiFinalists.append(s1)
138c74
< 			ncgSeeds[gameNum] = s2
---
> 			semiFinalists.append(s2)
141,142c77,78
< 	s1 = ncgSeeds[0]
< 	s2 = ncgSeeds[1]
---
> 	s1 = semiFinalists[0]
> 	s2 = semiFinalists[1]
145c81
< 
---
> 	
153d88
< 
156c91,97
< # between the given seeds s1, s2. 
---
> # between the given seeds s1, s2. For this version, it
> # is only used for Round 1, because the other rounds
> # use a fixed alpha value.
> # 
> # Note that K indicates the range (avg +/- K/2) from
> # which the alpha value will be sampled (if 
> # isFixedFirstRoundAlphas is false). 
158,196c99,103
< 	# Round 1 grouped alpha values for predicting 2013-2019,
< 	# where the first index is the better seed and the 
< 	# second index is [year - 2013]. The grouping is:
< 	# 1, 2, 3-4, 5-7, 8
< 	# r1GroupedAlphas = [
< 	# 	[],
< 	# 	[2,2,2,2,2,2,1.7692038993],
< 	# 	[1.4252197727,1.3625656943,1.3804523797,1.3977167918,1.3440101948,1.3602838429,1.3760407791],
< 	# 	[1.1327439019,1.1199577274,1.1293433883,1.1189438356,1.1083639629,1.1365944197,1.1245771481],
< 	# 	[1.1327439019,1.1199577274,1.1293433883,1.1189438356,1.1083639629,1.1365944197,1.1245771481],
< 	# 	[0.992260877,0.996405404,0.9802794213,1.0053287528,0.9535901796,0.947768435,0.9722115628],
< 	# 	[0.992260877,0.996405404,0.9802794213,1.0053287528,0.9535901796,0.947768435,0.9722115628],
< 	# 	[0.992260877,0.996405404,0.9802794213,1.0053287528,0.9535901796,0.947768435,0.9722115628],
< 	# 	[0,0,0,0,0,0,0]]
< 	r1GroupedAlphas = [
< 		[],
< 		[2,2,2,2,2,2,1.77],
< 		[1.43,1.36,1.38,1.40,1.34,1.36,1.38],
< 		[1.13,1.12,1.13,1.12,1.11,1.14,1.12],
< 		[1.13,1.12,1.13,1.12,1.11,1.14,1.12],
< 		[0.99,1.00,0.98,1.01,0.95,0.95,0.97],
< 		[0.99,1.00,0.98,1.01,0.95,0.95,0.97],
< 		[0.99,1.00,0.98,1.01,0.95,0.95,0.97],
< 		[-0.61,-0.59,-0.28,0.27,0,0.26,0]]
< 
< 	# Round 1 separated alpha values for predicting 2013-2019,
< 	# where the first index is the better seed and the 
< 	# second index is [year - 2013]. 
< 	# r1SeparateAlphas = [
< 	# 	[],
< 	# 	[2,2,2,2,2,2,1.7692038993],
< 	# 	[1.4252197727,1.3625656943,1.3804523797,1.3977167918,1.3440101948,1.3602838429,1.3760407791],
< 	# 	[1.1631440406,1.1437646,1.1260389104,1.0702482606,1.0570363456,1.0808615169,1.1038431398],
< 	# 	[1.1023437632,1.0961508547,1.1326478663,1.1676394106,1.1596915802,1.1923273226,1.1453111565],
< 	# 	[0.7612823908,0.6898202312,0.6242869483,0.6828764698,0.6603066747,0.6767844807,0.7293107575],
< 	# 	[1.0995538121,1.1222629842,1.0820607889,1.0447312883,0.9537101213,0.86947563,0.8427577133],
< 	# 	[1.1159464279,1.1771329966,1.2344905268,1.2883785003,1.2467537426,1.2970451943,1.3445662175],
< 	# 	[0,0,0,0,0,0,0]]
< 	r1SeparateAlphas = [
---
> 	# Round 1 alpha values from 2013 through 2018, 
> 	# rounded to two decimal places (2 is the default value).
> 	# First dimension is better seed number (1 at index 1),
> 	# second dimension is year (2013 at index 0)
> 	round1MatchupAlphaAvgsByYear = [
198,232c105,141
< 		[2,2,2,2,2,2,1.77],
< 		[1.43,1.36,1.38,1.40,1.34,1.36,1.38],
< 		[1.16,1.14,1.13,1.07,1.06,1.08,1.10],
< 		[1.10,1.10,1.13,1.17,1.16,1.19,1.15],
< 		[0.76,0.69,0.62,0.68,0.66,0.68,0.73],
< 		[1.10,1.12,1.08,1.04,0.95,0.87,0.84],
< 		[1.12,1.18,1.23,1.29,1.24,1.30,1.34],
< 		[-0.61,-0.59,-0.28,0.27,0,0.26,0]]
< 
< 	# Rounds 2-6 weighted average alpha values for predicting
< 	# 2013-2019, where the first index is [roundNum - 2] and 
< 	# the second index is [year - 2013].
< 	# r2to6Alphas = [
< 	# 	[1.0960226368,1.0255184405,1.0280047853,1.0169015383,1.0085075325,1.0517190671,1.0349243918],
< 	# 	[0.9074472394,0.8963083681,0.8581664326,0.8815834483,0.9021714769,0.9088993287,0.8644826467],
< 	# 	[0.3579691718,0.2302351327,0.1909716145,0.2167374254,0.136706458,0.1188463061,0.1504395788],
< 	# 	[0.6673769231,0.6983681575,0.5784406838,0.6093441472,0.6389325696,0.674510496,0.7010202861],
< 	# 	[1.4133971593,1.4171625002,1.441447396,1.441447396,1.1671880002,1.1671880002,1.199219231]]
< 	r2to6Alphas = [
< 		[1.10,1.03,1.03,1.02,1.01,1.05,1.03],
< 		[0.91,0.90,0.86,0.88,0.90,0.91,0.86],
< 		[0.36,0.23,0.19,0.22,0.14,0.12,0.15],
< 		[0.67,0.70,0.58,0.61,0.64,0.67,0.70],
< 		[1.41,1.42,1.44,1.44,1.17,1.17,1.20]]
< 
< 	isR1Grouped = 'False'
< 	if 'isR1Grouped' in model:
< 		isR1Grouped = 'True' in model['isR1Grouped']
< 
< 	alpha = 0
< 
< 	if (isR1Grouped) and (roundNum == 1):
< 		alpha = r1GroupedAlphas[s1][year - 2013]
< 	elif roundNum == 1:
< 		alpha = r1SeparateAlphas[s1][year - 2013]
---
> 		[2, 2, 2, 2, 2, 2],
> 		[1.43, 1.36, 1.38, 1.40, 1.34, 1.36],
> 		[1.16, 1.14, 1.13, 1.07, 1.06, 1.08],
> 		[1.10, 1.10, 1.13, 1.17, 1.16, 1.19],
> 		[0.76, 0.69, 0.62, 0.68, 0.66, 0.68],
> 		[1.10, 1.12, 1.08, 1.04, 0.95, 0.87],
> 		[1.12, 1.18, 1.23, 1.29, 1.25, 1.30],
> 		[-0.61, -0.59, -0.28, 0.27, 0, 0.26]]
> 
> 	# Round 1-6 weighted avg. alpha values from 
> 	# 2013 through 2017. 
> 	# First dimension is year (2013 at index 0), 
> 	# second dimension is round number (R1 at index 1)
> 	alphaAvgsByYear = [
> 		[0, 1.01, 1.10, 0.91, 0.36, 0.67, 1.41],
> 		[0, 1.00, 1.03, 0.90, 0.23, 0.70, 1.42],
> 		[0, 1.04, 1.03, 0.86, 0.19, 0.58, 1.44],
> 		[0, 1.12, 1.02, 0.88, 0.22, 0.61, 1.44],
> 		[0, 1.05, 1.01, 0.90, 0.14, 0.64, 1.17],
> 		[0, 1.09, 1.05, 0.91, 0.12, 0.67, 1.17]]
> 
> 	roundName = 'round{0}'.format(roundNum)
> 	roundInfo = model[roundName]
> 
> 	isWeightedAverage = "True" in roundInfo['isWeightedAverage']
> 	isMatchupSpecific = "True" in roundInfo['isMatchupSpecific']
> 
> 	if isMatchupSpecific:
> 		if roundNum > 1:
> 			sys.exit("Sorry, matchup-specific alpha values for Rounds 2-6 are not implemented.")
> 
> 		betterSeed = min(s1, s2)
> 		alpha = round1MatchupAlphaAvgsByYear[betterSeed][year - 2013]
> 	elif isWeightedAverage:
> 		if roundNum == 1:
> 			sys.exit("Nah, there's no way we're using the weighted average for Round 1.")
> 		alpha = alphaAvgsByYear[year - 2013][roundNum]
234c143
< 		alpha = r2to6Alphas[roundNum - 2][year - 2013]
---
> 		alpha = roundInfo['fixedAlpha']
247,250c156,157
< # Unused: if we want to measure this later, we can. 
< # 
< # # This function computes how many picks a bracket
< # # got correct given the bracket's score vector.
---
> # This function computes how many picks a bracket
> # got correct given the bracket's score vector.
286,290d192
< ######################################################################
< # This script runs experiments with the given models, 
< # number of trials, and number of batches for 2013 through 2018. 
< ######################################################################
< 
292c194
< modelFilename = 'models.json'
---
> modelFilename = 'models_TEST.json'
298a201,203
> 
> # This script runs experiments with the given models, number of trials,
> # and number of batches for the 2013 through 2018 tournaments. 
